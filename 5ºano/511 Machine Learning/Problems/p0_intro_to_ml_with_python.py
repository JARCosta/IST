# -*- coding: utf-8 -*-
"""P0_Intro_to_ML_with_python.ipynb

Automatically generated by Colab.



#important libraries

#  Numpy – library for mathematics and algebra
#  Scipy – scientific computing (advanced linear algebra routines, mathematical function, optimization, signal processing, special mathematical functions and statistical distributions)
#  Matplotlib (maplotlib.pyplot) – library for plotting data (different kinds of plot like histograms, pie, scatter) , showing images
#  Pandas – library to deal with tables (Dataframe Structure), similar to an Excel Spreadsheet

#  Tensorflow - neural networks library
#  Keras  - high level neural networks
#  Scikit-learn  - library with machine learning models (also some datasets)

"""### Load libraries (if necessary, pip install first)"""

import numpy as np

"""### The Basics"""

a = np.array([1,2,3], dtype='float')
print(a)

b = np.array([[9.0,8.0,7.0],[6.0,5.0,4.0]])
print(b)

# Get Shape
b.shape

# Get Type
a.dtype

# Get Size
a.itemsize

# Get total size
a.nbytes

# Get number of elements
a.size

"""### Accessing/Changing specific elements, rows, columns, etc"""

a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
print(a)

# Get a specific element [r, c]
a[1, 5]

# Get a specific row
a[0, :]

# Get a specific column
a[:, 2]

# Getting a little more fancy [startindex:endindex:stepsize]
a[0, 1:-1:2]

a[1,5] = 20

a[:,2] = [1,2]
print(a)

"""### Initializing Different Types of Arrays"""

# All 0s matrix
np.zeros((2,3))

# All 1s matrix
np.ones((4,2,2), dtype='float')

# Any other number
np.full((2,2), 99)

# Any other number (full_like)
np.full_like(a, 4)

# Random decimal numbers
a=np.random.rand(4,2)
print(a)

# Random Integer values
a=np.random.randint(-4,8, size=(3,3))

print(a)

# The identity matrix
np.identity(5)

# Repeat an array
arr = np.array([[1,2,3]])
r1 = np.repeat(arr,3, axis=0)
print(r1)

# Be careful when copying arrays!!!
a = np.array([1,2,3])
b = a.copy()
print(a)
print(b)
b[0] = 100
print(b)

print(a)

"""### Mathematics"""

a = np.array([1,2,3,4])
print(a)

a + 2

a - 2

a * 2

a / 2

b = np.array([1,0,1,0])
a + b

a ** 2

# Take the sin
np.cos(a)

# For a lot more (https://docs.scipy.org/doc/numpy/reference/routines.math.html)

"""##### Linear Algebra"""

a = np.ones((2,4))
print(a)

b = np.full((4,2), 2)
print(b)

np.matmul(a,b)

# Find the determinant
c = np.identity(3)
np.linalg.det(c)

## Reference docs (https://docs.scipy.org/doc/numpy/reference/routines.linalg.html)

# Determinant
# Trace
# Singular Vector Decomposition
# Eigenvalues
# Matrix Norm
# Inverse
# Etc...

"""##### Statistics"""

stats = np.array([[1,2,3],[4,5,6]])
stats

np.min(stats)

np.max(stats, axis=1)

np.sum(stats, axis=0)

"""### Reorganizing Arrays"""

before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)

after = before.reshape((4,2))
print(after)

# Vertically stacking vectors
v1 = np.array([1,2,3,4])
v2 = np.array([5,6,7,8])

np.vstack([v1,v2,v1,v2])

# Horizontal  stack
h1 = np.ones((2,4))
h2 = np.zeros((2,2))

np.hstack((h1,h2))

"""### Miscellaneous

##### Plotting
"""

import matplotlib.pyplot as plt

a = np.array([1,2,3,4,5,6])
b = np.ones((6))

plt.plot(a,label='vector a')
plt.plot(b,label='vector b')
plt.title('my figure')
plt.legend()

# many more check https://matplotlib.org/stable/plot_types/index.html

#plot
#bar
#stem
#scatter
#hist
#imshow

#save and load a numpy file
np.save('a.npy',a)
b=np.load('a.npy')
b

print(a)

"""##### Saving and loading data from file

### ML example: Classification with k-NN (K-Nearest neigbours)
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics



iris=load_iris()

iris.data

print(iris.data.shape)

print(iris.feature_names)

print(iris.target)

print(iris.target_names)

X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.33, random_state=42)

print(X_train.shape)
print(X_test.shape)

print(y_train.shape)
print(y_test.shape)

k=3
knn=KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,y_train)

y_pred=knn.predict(X_test)

print(y_pred)

print(y_test[0:20])
print(y_pred[0:20])

scores=metrics.accuracy_score(y_test,y_pred)
print(scores)